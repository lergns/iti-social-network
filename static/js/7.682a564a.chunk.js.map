{"version":3,"sources":["components/common/FormControls/formControls.module.css","utils/validators/validators.ts","components/common/FormControls/FormControls.tsx","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx"],"names":["module","exports","maxLength","requiredField","inputValue","maxLength100","length","FormControl","React","memo","meta","children","hasError","touched","error","className","classes","formControl","Textarea","props","input","restProps","Input","LoginForm","handleSubmit","onSubmit","Field","component","name","placeholder","validate","type","formLevelError","reduxForm","form","Login","login","isAuth","to","formData","email","password","rememberMe","LoginContainer","connect","state","selectIsAuth"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,eAAiB,uC,iCCCvH,oEAAO,IAK0BC,EALpBC,EAAoC,SAACC,GAChD,OAAIA,EAAmB,KACX,qBAUDC,GAPoBH,EAOY,IAP8B,SACzEE,GAEA,OAAIA,EAAWE,QAAUJ,EAAkB,KACtC,wBAAwBA,EAAxB,e,kKCPDK,EAAqCC,IAAMC,MAAK,YAAyB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACvDC,EAAoBF,EAAKG,SAAWH,EAAKI,MAE/C,OACE,sBACEC,UAAWC,IAAQC,YAAc,KAAOL,EAAWI,IAAQF,MAAQ,IADrE,UAGE,8BAAMH,IACN,8BAAMC,GAAY,+BAAOF,EAAKI,gBAKvBI,EAAkCV,IAAMC,MAAK,SAACU,GACTA,EAAxCR,SAD4D,IAClDS,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KAD0C,YACnBS,EADmB,8BAEnE,OACE,cAACZ,EAAD,2BAAiBY,GAAjB,aACE,oDAAcC,GAAWC,UAKlBC,EAA+Bd,IAAMC,MAAK,SAACU,GACNA,EAAxCR,SADyD,IAC/CS,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KADuC,YAChBS,EADgB,8BAEhE,OACE,cAACZ,EAAD,2BAAiBY,GAAjB,aACE,iDAAWC,GAAWC,W,yHClBtBE,EAA4Df,IAAMC,MACtE,YAA8B,IAA3Be,EAA0B,EAA1BA,aAAcV,EAAY,EAAZA,MACf,OACE,uBAAMW,SAAUD,EAAhB,UACE,8BACE,cAACE,EAAA,EAAD,CACEC,UAAWL,IACXM,KAAM,QACNC,YAAa,QACbC,SAAU,CAAC3B,SAGf,8BACE,cAACuB,EAAA,EAAD,CACEC,UAAWL,IACXM,KAAM,WACNG,KAAM,WACNF,YAAa,WACbC,SAAU,CAAC3B,SAGf,gCACE,cAACuB,EAAA,EAAD,CAAOC,UAAWL,IAAOM,KAAM,aAAcG,KAAM,aADrD,iBAICjB,GAAS,qBAAKC,UAAWC,IAAQgB,eAAxB,SAAyClB,IACnD,8BACE,oDAOKmB,cAA6B,CAAEC,KAAM,aAArCD,CAAoDV,G,OCzCtDY,EAAQ3B,IAAMC,MAAK,YAAwC,IAArC2B,EAAoC,EAApCA,MAKjC,OALqE,EAA7BC,OAKrB,cAAC,IAAD,CAAUC,GAAI,aAG7B,gCACE,wCACA,cAAC,EAAD,CAAWb,SATA,SAACc,GAAD,OACfH,EAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,qB,wBCShDC,EAAiBC,aAJC,SAACC,GAAD,MAA2B,CACjDR,OAAQS,YAAaD,MAQJ,CAAET,WALEQ,CAKOT,GAEfQ","file":"static/js/7.682a564a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formControls_formControl__3RMTF\",\"error\":\"formControls_error__2-i41\",\"formLevelError\":\"formControls_formLevelError__1uTkE\"};","type FieldValidatorType = (inputValue: string) => string | null;\n\nexport const requiredField: FieldValidatorType = (inputValue) => {\n  if (inputValue) return null;\n  else return \"Field is required\";\n};\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (\n  inputValue\n) => {\n  if (inputValue.length <= maxLength) return null;\n  else return `Max length is ${maxLength} symbols`;\n}; // HOF\n\nexport const maxLength100 = maxLengthCreator(100);\n","import React, { FC } from \"react\";\nimport { WrappedFieldProps } from \"redux-form\";\nimport classes from \"./formControls.module.css\";\n\nconst FormControl: FC<WrappedFieldProps> = React.memo(({ meta, children }) => {\n  const hasError: boolean = meta.touched && meta.error; // if Field was touched and there is an error ( validate[] )\n\n  return (\n    <div\n      className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}\n    >\n      <div>{children}</div>\n      <div>{hasError && <span>{meta.error}</span>}</div>\n    </div>\n  );\n});\n\nexport const Textarea: FC<WrappedFieldProps> = React.memo((props) => {\n  const { children, input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <textarea {...input} {...restProps} />\n    </FormControl>\n  );\n});\n\nexport const Input: FC<WrappedFieldProps> = React.memo((props) => {\n  const { children, input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <input {...input} {...restProps} />\n    </FormControl>\n  );\n});\n","import React from \"react\";\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport { Input } from \"../../common/FormControls/FormControls\";\nimport { requiredField } from \"../../../utils/validators/validators\";\nimport classes from \"../../common/FormControls/formControls.module.css\";\n\nexport type LoginFormDataType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n};\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType>> = React.memo(\n  ({ handleSubmit, error }) => {\n    return (\n      <form onSubmit={handleSubmit}>\n        <div>\n          <Field\n            component={Input}\n            name={\"email\"}\n            placeholder={\"Email\"}\n            validate={[requiredField]}\n          />\n        </div>\n        <div>\n          <Field\n            component={Input}\n            name={\"password\"}\n            type={\"password\"}\n            placeholder={\"Password\"}\n            validate={[requiredField]}\n          />\n        </div>\n        <div>\n          <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"} />\n          Remember me\n        </div>\n        {error && <div className={classes.formLevelError}>{error}</div>}\n        <div>\n          <button>Log in</button>\n        </div>\n      </form>\n    );\n  }\n);\n\nexport default reduxForm<LoginFormDataType>({ form: \"loginForm\" })(LoginForm);\n","import React from \"react\";\nimport LoginForm, { LoginFormDataType } from \"./LoginForm/LoginForm\";\nimport { LoginPropsType } from \"./LoginContainer\";\nimport { Redirect } from \"react-router-dom\";\n\nexport const Login = React.memo(({ login, isAuth }: LoginPropsType) => {\n  const onSubmit = (formData: LoginFormDataType) =>\n    login(formData.email, formData.password, formData.rememberMe);\n  // props.login !== loginTC , connect()() from LoginContainer passed eponymous callback via props, which dispatches loginTC inside of itself !\n\n  if (isAuth) return <Redirect to={\"/profile\"} />;\n  else\n    return (\n      <div>\n        <h1>Log in</h1>\n        <LoginForm onSubmit={onSubmit} />\n      </div>\n    );\n});\n","import { RootStateType } from \"../../redux/redux-store\";\nimport { Login } from \"./Login\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../redux/auth/authReducer\";\nimport { selectIsAuth } from \"../../redux/auth/authSelectors\";\n\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>;\ntype MapDispatchPropsType = {\n  login: (email: string, password: string, rememberMe?: boolean) => void;\n};\nexport type LoginPropsType = MapStatePropsType & MapDispatchPropsType;\n\nconst mapStateToProps = (state: RootStateType) => ({\n  isAuth: selectIsAuth(state),\n});\n\nconst LoginContainer = connect<\n  MapStatePropsType,\n  MapDispatchPropsType,\n  unknown,\n  RootStateType\n>(mapStateToProps, { login })(Login);\n\nexport default LoginContainer;\n"],"sourceRoot":""}