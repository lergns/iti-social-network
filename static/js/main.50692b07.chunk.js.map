{"version":3,"sources":["components/Navbar/Navbar.module.css","redux/app/appReducer.ts","redux/store.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Navbar/Navbar.tsx","redux/app/appSelectors.ts","hoc/withSuspense.tsx","AppContainer.tsx","index.tsx","api/auth-api.ts","api/security-api.ts","redux/auth/authReducer.ts","api/users-api.ts","redux/users/usersReducer.ts","assets/images/preloader.gif","components/common/Preloader/Preloader.tsx","redux/auth/authSelectors.ts","components/Header/Header.module.css","api/api.ts","api/profile-api.ts","redux/profile/profileReducer.ts","redux/dialogues/dialoguesReducer.ts","components/common/Preloader/Preloader.module.css"],"names":["module","exports","appInitialState","isInitialized","appActions","type","payload","rootReducer","combineReducers","profilePage","profileReducer","dialoguesPage","dialoguesReducer","usersPage","usersReducer","auth","authReducer","app","appState","action","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Header","React","memo","isAuth","login","logout","className","classes","header","src","alt","loginBlock","style","cursor","onClick","to","HeaderClassContainer","render","props","PureComponent","HeaderContainer","connect","state","selectIsAuth","selectLogin","Navbar","nav","item","activeClassName","active","selectIsInitialized","withSuspense","WrappedComponent","fallback","Preloader","SuspendedUsersContainer","lazy","SuspendedProfileContainer","SuspendedDialoguesContainer","SuspendedLoginContainer","AppClassContainer","catchUnhandledRejections","event","console","warn","reason","path","from","this","initializeApp","addEventListener","removeEventListener","AppContainer","dispatch","a","getAuthUserData","withRouter","ReactDOM","document","getElementById","authAPI","axiosInstance","get","then","res","data","email","password","rememberMe","captcha","post","delete","securityAPI","authInitialState","id","captchaURL","authState","authActions","resultCode","ResultCode","Success","alert","usersActions","setCurrentPageNumber","Captcha","getCaptchaURL","errMessage","messages","length","stopSubmit","_error","url","usersAPI","currentPageNumber","pageSize","userID","usersInitialState","users","totalUsersCount","isFetching","followingInProgress","usersState","map","user","followed","filter","followSuccess","unfollowSuccess","setUsers","setTotalUsersCount","setIsFetching","newIsFetching","setFollowingProgress","fetchUsers","error","items","totalCount","follow","unfollow","preloader","selectAuthUserID","selectCaptchaURL","axios","create","headers","baseURL","withCredentials","profileAPI","status","put","image","formData","FormData","append","profileInitialState","posts","postText","likesCount","userProfile","profileState","updatedState","newPost","newPostText","postID","photos","profileActions","addPost","deletePost","setUserProfile","setProfileStatus","setProfilePhoto","getUserProfile","getProfileStatus","updateProfileStatus","updateProfilePhoto","photo","dialoguesInitialState","dialogues","personName","messageText","dialoguesState","push","newMessageText","dialoguesActions","sendMessage"],"mappings":"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","file":"static/js/main.50692b07.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__g8jcu\",\"item\":\"Navbar_item__2BmSg\",\"active\":\"Navbar_active__3YPzP\"};","import { InferActionsType, RootThunkType } from \"../store\";\nimport { getAuthUserData } from \"../auth/authReducer\";\n\ntype AppInitialStateType = typeof appInitialState;\ntype AppReducerActionsType = InferActionsType<typeof appActions>;\n// TYPES\n\nconst appInitialState = { isInitialized: false };\n\nexport const appReducer = (\n  appState = appInitialState,\n  action: AppReducerActionsType\n): AppInitialStateType => {\n  switch (action.type) {\n    case \"app/SET_INITIALIZED\":\n      return { ...appState, ...action.payload };\n\n    default:\n      return appState;\n  }\n};\n// REDUCER\n\nexport const appActions = {\n  setInitialized: (isInitialized: boolean) =>\n    ({\n      type: \"app/SET_INITIALIZED\",\n      payload: {\n        isInitialized,\n      },\n    } as const),\n};\n// ACs\n\nexport const initializeApp = (): RootThunkType<AppReducerActionsType> => async (\n  dispatch\n) => {\n  try {\n    // dispatch(getAuthUserData()) - returns promise\n    await dispatch(getAuthUserData());\n    dispatch(appActions.setInitialized(true));\n  } catch (e) {\n    console.warn(e);\n  }\n};\n// TCs\n","import {\n  Action,\n  applyMiddleware,\n  combineReducers,\n  compose,\n  createStore,\n} from \"redux\";\nimport { profileReducer } from \"./profile/profileReducer\";\nimport { dialoguesReducer } from \"./dialogues/dialoguesReducer\";\nimport { usersReducer } from \"./users/usersReducer\";\nimport { authReducer } from \"./auth/authReducer\";\nimport thunk, { ThunkAction } from \"redux-thunk\";\nimport { reducer as formReducer } from \"redux-form\";\nimport { appReducer } from \"./app/appReducer\";\n\nexport type InferActionsType<T> = T extends {\n  [key: string]: (...args: any[]) => infer U;\n}\n  ? U\n  : never; // universal type to auto-infer type of any actions' object\n\n// R = (void | Promise<void>)\nexport type RootThunkType<A extends Action, R = Promise<void>> = ThunkAction<\n  R,\n  RootStateType,\n  unknown,\n  A // A === PARTICULARReducerActionsType\n>;\n\nexport type RootStateType = ReturnType<typeof rootReducer>;\n// TYPES\n\nconst rootReducer = combineReducers({\n  profilePage: profileReducer,\n  dialoguesPage: dialoguesReducer,\n  usersPage: usersReducer,\n  auth: authReducer,\n  app: appReducer,\n  form: formReducer,\n});\n\n// configuring Redux DevTools for this app\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\n// @ts-ignore\nwindow.store = store;\n","import { NavLink } from \"react-router-dom\";\nimport React from \"react\";\nimport classes from \"./Header.module.css\";\nimport { HeaderPropsType } from \"./HeaderContainer\";\n\nexport const Header = React.memo(\n  ({ isAuth, login, logout }: HeaderPropsType) => {\n    return (\n      <header className={classes.header}>\n        <img\n          src={\"https://cdn.logo.com/hotlink-ok/logo-social-sq.png\"}\n          alt={\"Logo\"}\n        />\n        <div className={classes.loginBlock}>\n          {isAuth ? (\n            <div>\n              {login} -{\" \"}\n              <button style={{ cursor: \"pointer\" }} onClick={logout}>\n                Log out\n              </button>\n            </div>\n          ) : (\n            <NavLink to={\"/login\"}>Log in</NavLink>\n          )}\n        </div>\n      </header>\n    );\n  }\n);\n","import React from \"react\";\nimport { Header } from \"./Header\";\nimport { connect } from \"react-redux\";\nimport { logout } from \"../../redux/auth/authReducer\";\nimport { RootStateType } from \"../../redux/store\";\nimport { selectIsAuth, selectLogin } from \"../../redux/auth/authSelectors\";\n// IMPORTS\n\ntype MapStatePropsType = {\n  isAuth: ReturnType<typeof selectIsAuth>;\n  login: ReturnType<typeof selectLogin>;\n};\ntype MapDispatchPropsType = {\n  logout: () => void;\n};\nexport type HeaderPropsType = MapStatePropsType & MapDispatchPropsType;\n// TYPES\n\n// HeaderContainer --> HeaderClassContainer --> Header\nclass HeaderClassContainer extends React.PureComponent<HeaderPropsType> {\n  render = () => {\n    return <Header {...this.props} />;\n  };\n}\n\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => ({\n  isAuth: selectIsAuth(state),\n  login: selectLogin(state),\n});\n\nexport const HeaderContainer = connect<\n  MapStatePropsType,\n  MapDispatchPropsType,\n  unknown,\n  RootStateType\n>(mapStateToProps, {\n  logout,\n})(HeaderClassContainer);\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport classes from \"./Navbar.module.css\";\n\nexport const Navbar = () => {\n  return (\n    <nav className={classes.nav}>\n      <div className={classes.item}>\n        <NavLink to={\"/profile\"} activeClassName={classes.active}>\n          Profile\n        </NavLink>\n      </div>\n      <div className={classes.item}>\n        <NavLink to={\"/dialogues\"} activeClassName={classes.active}>\n          Dialogues\n        </NavLink>\n      </div>\n      <div className={classes.item}>\n        <NavLink to={\"/users\"} activeClassName={classes.active}>\n          Users\n        </NavLink>\n      </div>\n      <div className={classes.item}>\n        <NavLink to={\"/news\"} activeClassName={classes.active}>\n          News\n        </NavLink>\n      </div>\n      <div className={classes.item}>\n        <NavLink to={\"/settings\"} activeClassName={classes.active}>\n          Settings\n        </NavLink>\n      </div>\n    </nav>\n  );\n};\n","import { RootStateType } from \"../store\";\n\nexport const selectIsInitialized = (state: RootStateType): boolean =>\n  state.app.isInitialized;\n","import React, { ComponentType, Suspense } from \"react\";\nimport { Preloader } from \"../components/common/Preloader/Preloader\";\n\n// WCP === wrapped component props\nexport function withSuspense<WCP>(WrappedComponent: ComponentType<WCP>) {\n  return (props: WCP) => {\n    return (\n      <Suspense fallback={<Preloader />}>\n        <WrappedComponent {...props} />\n      </Suspense>\n      // <Suspense /> will display <Preloader /> while <ProfileContainer /> is loading\n    );\n  };\n}\n","import React from \"react\";\nimport { Redirect, Route, Switch, withRouter } from \"react-router-dom\";\nimport \"./AppContainer.css\";\nimport { HeaderContainer } from \"./components/Header/HeaderContainer\";\nimport { Navbar } from \"./components/Navbar/Navbar\";\nimport { connect } from \"react-redux\";\nimport { RootStateType } from \"./redux/store\";\nimport { compose } from \"redux\";\nimport { initializeApp } from \"./redux/app/appReducer\";\nimport { Preloader } from \"./components/common/Preloader/Preloader\";\nimport { selectIsInitialized } from \"./redux/app/appSelectors\";\nimport { withSuspense } from \"./hoc/withSuspense\";\n\nconst UsersLazyContainer = React.lazy(\n  () => import(\"./components/Users/UsersContainer\")\n);\nconst SuspendedUsersContainer = withSuspense(UsersLazyContainer);\nconst ProfileLazyContainer = React.lazy(\n  () => import(\"./components/Profile/ProfileContainer\")\n);\nconst SuspendedProfileContainer = withSuspense(ProfileLazyContainer);\nconst DialoguesLazyContainer = React.lazy(\n  () => import(\"./components/Dialogues/DialoguesContainer\")\n);\nconst SuspendedDialoguesContainer = withSuspense(DialoguesLazyContainer);\nconst LoginLazyContainer = React.lazy(\n  () => import(\"./components/Login/LoginContainer\")\n);\nconst SuspendedLoginContainer = withSuspense(LoginLazyContainer);\n// lazy-loaded components\n\ntype MapStatePropsType = {\n  isInitialized: ReturnType<typeof selectIsInitialized>;\n};\ntype MapDispatchPropsType = {\n  initializeApp: () => void;\n};\ntype AppClassContainerPropsType = MapStatePropsType & MapDispatchPropsType;\n\nclass AppClassContainer extends React.PureComponent<AppClassContainerPropsType> {\n  componentDidMount() {\n    this.props.initializeApp();\n\n    window.addEventListener(\n      \"unhandledrejection\",\n      this.catchUnhandledRejections\n    );\n  }\n\n  // clearing subscription on component unmount\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"unhandledrejection\",\n      this.catchUnhandledRejections\n    );\n  }\n\n  // subscribing to all unhandled promise rejections\n  catchUnhandledRejections = (event: PromiseRejectionEvent) => {\n    console.warn(`UNHANDLED PROMISE REJECTION: ${event.reason}`);\n  };\n\n  render = () => {\n    if (!this.props.isInitialized) {\n      return <Preloader />;\n    } else {\n      return (\n        <div className={\"app-wrapper\"}>\n          <HeaderContainer />\n          <Navbar />\n          <div className={\"app-wrapper-content\"}>\n            <Switch>\n              <Route\n                path={\"/profile/:userID?\"}\n                render={() => <SuspendedProfileContainer />}\n              />\n              <Route\n                path={\"/dialogues\"}\n                render={() => <SuspendedDialoguesContainer />}\n              />\n              <Route\n                path={\"/users\"}\n                render={() => <SuspendedUsersContainer />}\n              />\n              <Route\n                path={\"/login\"}\n                render={() => <SuspendedLoginContainer />}\n              />\n              <Route path={\"/news\"} render={() => <h1>News</h1>} />\n              <Route path={\"/settings\"} render={() => <h1>Settings</h1>} />\n              <Redirect from={\"/\"} to={\"/profile\"} />\n              <Redirect from={\"*\"} to={\"/profile\"} />\n            </Switch>\n          </div>\n        </div>\n      );\n    }\n  };\n}\n\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => ({\n  isInitialized: selectIsInitialized(state),\n});\n\nexport const AppContainer = compose<React.ComponentType>(\n  connect<MapStatePropsType, MapDispatchPropsType, unknown, RootStateType>(\n    mapStateToProps,\n    {\n      initializeApp,\n    }\n  ),\n  withRouter\n)(AppClassContainer);\n","import React from \"react\";\nimport \"./index.css\";\nimport { store } from \"./redux/store\";\nimport ReactDOM from \"react-dom\";\nimport { AppContainer } from \"./AppContainer\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n","import { axiosInstance, ResponseType } from \"./api\";\n\ntype GetMeDataType = {\n  id: number;\n  email: string;\n  login: string;\n};\n// TYPES\n\nexport const authAPI = {\n  me() {\n    return axiosInstance\n      .get<ResponseType<GetMeDataType>>(`auth/me`)\n      .then((res) => res.data);\n  },\n  login(\n    email: string,\n    password: string,\n    rememberMe?: boolean,\n    captcha?: string\n  ) {\n    return axiosInstance\n      .post<ResponseType<{ userId?: number }>>(`/auth/login`, {\n        email,\n        password,\n        rememberMe,\n        captcha,\n      })\n      .then((res) => res.data);\n  },\n  logout() {\n    return axiosInstance\n      .delete<ResponseType>(`/auth/login`)\n      .then((res) => res.data);\n  },\n};\n","import { axiosInstance } from \"./api\";\n\nexport const securityAPI = {\n  getCaptcha() {\n    return axiosInstance\n      .get<{ url: string }>(`security/get-captcha-url`)\n      .then((res) => res.data);\n  },\n};\n","import { InferActionsType, RootThunkType } from \"../store\";\nimport { stopSubmit } from \"redux-form\";\nimport { usersActions, UsersReducerActionsType } from \"../users/usersReducer\";\nimport { authAPI } from \"../../api/auth-api\";\nimport { ResultCode } from \"../../api/api\";\nimport { securityAPI } from \"../../api/security-api\";\nimport { FormAction } from \"redux-form/lib/actions\";\n\ntype AuthInitialStateType = typeof authInitialState;\ntype AuthReducerActionsType = InferActionsType<typeof authActions>;\n// TYPES\n\nconst authInitialState = {\n  id: null as number | null,\n  login: null as string | null,\n  email: null as string | null,\n  isAuth: false as boolean,\n  captchaURL: null as null | string,\n};\n\nexport const authReducer = (\n  authState = authInitialState,\n  action: AuthReducerActionsType\n): AuthInitialStateType => {\n  switch (action.type) {\n    case \"auth/SET_AUTH_USER_DATA\":\n    case \"auth/SET_CAPTCHA_URL\":\n      return { ...authState, ...action.payload };\n\n    default:\n      return authState;\n  }\n};\n// REDUCER\n\nexport const authActions = {\n  setAuthUserData: (\n    id: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean\n  ) =>\n    ({\n      type: \"auth/SET_AUTH_USER_DATA\",\n      payload: {\n        id,\n        email,\n        login,\n        isAuth,\n      },\n    } as const),\n  setCaptchaURL: (captchaURL: string | null) =>\n    ({\n      type: \"auth/SET_CAPTCHA_URL\",\n      payload: {\n        captchaURL,\n      },\n    } as const),\n};\n// ACs\n\nexport const getAuthUserData = (): RootThunkType<AuthReducerActionsType> => async (\n  dispatch\n) => {\n  try {\n    const res = await authAPI.me();\n    if (res.resultCode === ResultCode.Success) {\n      const { id, email, login } = res.data;\n      dispatch(authActions.setAuthUserData(id, email, login, true));\n    }\n  } catch (e) {\n    console.warn(e);\n    alert(\"An error has occurred. Please try again later.\");\n  }\n};\nexport const login = (\n  email: string,\n  password: string,\n  rememberMe?: boolean,\n  captcha?: string\n): RootThunkType<\n  AuthReducerActionsType | UsersReducerActionsType | FormAction\n> => async (dispatch) => {\n  try {\n    const res = await authAPI.login(email, password, rememberMe, captcha);\n    if (res.resultCode === ResultCode.Success) {\n      await dispatch(getAuthUserData()); // dispatching thunk from another thunk\n      dispatch(usersActions.setCurrentPageNumber(1));\n    } else {\n      if (res.resultCode === ResultCode.Captcha) {\n        await dispatch(getCaptchaURL()); // dispatching thunk from another thunk\n      }\n      const errMessage = res.messages.length\n        ? res.messages[0]\n        : \"Incorrect log in data\";\n      alert(errMessage);\n      dispatch(stopSubmit(\"loginForm\", { _error: errMessage }));\n    }\n  } catch (e) {\n    console.warn(e);\n    alert(\"An error has occurred. Please try again later.\");\n  }\n};\nexport const logout = (): RootThunkType<\n  AuthReducerActionsType | UsersReducerActionsType\n> => async (dispatch) => {\n  try {\n    const res = await authAPI.logout();\n    if (res.resultCode === ResultCode.Success) {\n      dispatch(authActions.setAuthUserData(null, null, null, false));\n      dispatch(authActions.setCaptchaURL(null));\n      dispatch(usersActions.setCurrentPageNumber(1));\n    } else {\n      const errMessage = res.messages[0];\n      alert(errMessage);\n      console.warn(errMessage); // handling errors by resultCode\n    }\n  } catch (e) {\n    console.warn(e);\n    alert(\"An error has occurred. Please try again later.\"); // handling errors by status code\n  }\n};\nexport const getCaptchaURL = (): RootThunkType<AuthReducerActionsType> => async (\n  dispatch\n) => {\n  try {\n    const res = await securityAPI.getCaptcha();\n    const captchaURL = res.url;\n    dispatch(authActions.setCaptchaURL(captchaURL));\n  } catch (e) {\n    console.warn(e);\n    alert(\"An error has occurred. Please try again later.\");\n  }\n};\n// TCs\n","import { axiosInstance, ResponseType } from \"./api\";\nimport { PhotosType } from \"./profile-api\";\n\ntype GetUsersResponseType = {\n  items: Array<UserType>;\n  totalCount: number;\n  error: string | null;\n};\nexport type UserType = {\n  id: number;\n  name: string;\n  status: string | null;\n  followed: boolean;\n  photos: PhotosType;\n};\n// TYPES\n\nexport const usersAPI = {\n  getUsers(currentPageNumber = 1, pageSize = 100) {\n    return axiosInstance\n      .get<GetUsersResponseType>(\n        `users?page=${currentPageNumber}&count=${pageSize}`\n      )\n      .then((res) => res.data);\n  },\n  follow(userID: number) {\n    return axiosInstance\n      .post<ResponseType>(`follow/${userID}`)\n      .then((res) => res.data);\n  },\n  unfollow(userID: number) {\n    return axiosInstance\n      .delete<ResponseType>(`follow/${userID}`)\n      .then((res) => res.data);\n  },\n};\n","import { ResultCode } from \"../../api/api\";\nimport { InferActionsType, RootThunkType } from \"../store\";\nimport { usersAPI, UserType } from \"../../api/users-api\";\n\ntype UsersInitialStateType = typeof usersInitialState;\nexport type UsersReducerActionsType = InferActionsType<typeof usersActions>;\n// TYPES\n\nconst usersInitialState = {\n  users: [] as Array<UserType>,\n  pageSize: 100,\n  totalUsersCount: 0,\n  currentPageNumber: 1,\n  isFetching: false,\n  followingInProgress: [] as Array<number>, // array of user ids'\n};\n\nexport const usersReducer = (\n  usersState = usersInitialState,\n  action: UsersReducerActionsType\n): UsersInitialStateType => {\n  switch (action.type) {\n    case \"users/FOLLOW_SUCCESS\":\n      return {\n        ...usersState,\n        users: usersState.users.map((user) =>\n          user.id === action.payload.userID ? { ...user, followed: true } : user\n        ), // also copying USER to be changed\n      };\n\n    case \"users/UNFOLLOW_SUCCESS\":\n      return {\n        ...usersState,\n        users: usersState.users.map((user) =>\n          user.id === action.payload.userID\n            ? { ...user, followed: false }\n            : user\n        ),\n      };\n\n    case \"users/SET_USERS\":\n    case \"users/SET_CURRENT_PAGE_NUMBER\":\n    case \"users/SET_TOTAL_USERS_COUNT\":\n    case \"users/SET_IS_FETCHING\":\n      return { ...usersState, ...action.payload }; // multiple cases with the same code block to execute\n\n    case \"users/SET_FOLLOWING_PROGRESS\":\n      return {\n        ...usersState,\n        followingInProgress: action.payload.followingInProgress\n          ? [...usersState.followingInProgress, action.payload.userID]\n          : usersState.followingInProgress.filter(\n              (id) => id !== action.payload.userID\n            ),\n      };\n\n    default:\n      return usersState;\n  }\n};\n// REDUCER\n\nexport const usersActions = {\n  followSuccess: (userID: number) =>\n    ({\n      type: \"users/FOLLOW_SUCCESS\",\n      payload: {\n        userID,\n      },\n    } as const),\n  unfollowSuccess: (userID: number) =>\n    ({\n      type: \"users/UNFOLLOW_SUCCESS\",\n      payload: {\n        userID,\n      },\n    } as const),\n  setUsers: (users: Array<UserType>) =>\n    ({\n      type: \"users/SET_USERS\",\n      payload: {\n        users,\n      },\n    } as const),\n  setCurrentPageNumber: (currentPageNumber: number) =>\n    ({\n      type: \"users/SET_CURRENT_PAGE_NUMBER\",\n      payload: {\n        currentPageNumber,\n      },\n    } as const),\n  setTotalUsersCount: (totalUsersCount: number) =>\n    ({\n      type: \"users/SET_TOTAL_USERS_COUNT\",\n      payload: {\n        totalUsersCount,\n      },\n    } as const),\n  setIsFetching: (newIsFetching: boolean) =>\n    ({\n      type: \"users/SET_IS_FETCHING\",\n      payload: {\n        newIsFetching,\n      },\n    } as const),\n  setFollowingProgress: (userID: number, followingInProgress: boolean) =>\n    ({\n      type: \"users/SET_FOLLOWING_PROGRESS\",\n      payload: {\n        userID,\n        followingInProgress,\n      },\n    } as const),\n};\n// ACs\n\nexport const fetchUsers = (\n  currentPageNumber: number,\n  pageSize: number\n): RootThunkType<UsersReducerActionsType> => async (dispatch) => {\n  dispatch(usersActions.setIsFetching(true));\n  try {\n    const res = await usersAPI.getUsers(currentPageNumber, pageSize);\n    if (!res.error) {\n      dispatch(usersActions.setUsers(res.items));\n      dispatch(usersActions.setTotalUsersCount(res.totalCount));\n    } else {\n      const errMessage = res.error;\n      alert(errMessage);\n      console.warn(errMessage);\n    }\n  } catch (e) {\n    console.warn(e);\n  }\n  dispatch(usersActions.setIsFetching(false));\n};\nexport const follow = (\n  userID: number\n): RootThunkType<UsersReducerActionsType> => async (dispatch) => {\n  dispatch(usersActions.setFollowingProgress(userID, true));\n  try {\n    const res = await usersAPI.follow(userID);\n    if (res.resultCode === ResultCode.Success) {\n      dispatch(usersActions.followSuccess(userID));\n    } else {\n      const errMessage = res.messages[0];\n      alert(errMessage);\n      console.warn(errMessage);\n    }\n  } catch (e) {\n    console.warn(e);\n  }\n  dispatch(usersActions.setFollowingProgress(userID, false));\n};\nexport const unfollow = (\n  userID: number\n): RootThunkType<UsersReducerActionsType> => async (dispatch) => {\n  dispatch(usersActions.setFollowingProgress(userID, true));\n  try {\n    const res = await usersAPI.unfollow(userID);\n    if (res.resultCode === ResultCode.Success) {\n      dispatch(usersActions.unfollowSuccess(userID));\n    } else {\n      const errMessage = res.messages[0];\n      alert(errMessage);\n      console.warn(errMessage);\n    }\n  } catch (e) {\n    console.warn(e);\n  }\n  dispatch(usersActions.setFollowingProgress(userID, false));\n};\n// TCs\n","export default __webpack_public_path__ + \"static/media/preloader.f1283d50.gif\";","import React from \"react\";\nimport preloader from \"../../../assets/images/preloader.gif\";\nimport classes from \"./Preloader.module.css\";\n\nexport const Preloader = () => {\n  return <img src={preloader} className={classes.preloader} alt={\"Loading\"} />;\n};\n","import { RootStateType } from \"../store\";\n\nexport const selectAuthUserID = (state: RootStateType): number | null =>\n  state.auth.id;\nexport const selectIsAuth = (state: RootStateType): boolean =>\n  state.auth.isAuth;\nexport const selectLogin = (state: RootStateType): string | null =>\n  state.auth.login;\nexport const selectCaptchaURL = (state: RootStateType): null | string =>\n  state.auth.captchaURL;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2ZhVC\",\"loginBlock\":\"Header_loginBlock__1o6Be\"};","import axios from \"axios\";\n\nexport enum ResultCode {\n  Success = 0,\n  Error = 1,\n  Captcha = 10,\n}\n\nexport type ResponseType<D = {}> = {\n  resultCode: ResultCode;\n  messages: Array<string>;\n  data: D;\n};\n// TYPES\n\nexport const axiosInstance = axios.create({\n  headers: {\n    \"API-KEY\": \"264a0581-6cdc-4a28-9b7e-b8b5b1060aa0\",\n  },\n  baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\n  withCredentials: true,\n});\n","import { axiosInstance, ResponseType } from \"./api\";\n\nexport type UserProfileType = {\n  aboutMe: string;\n  userId: number;\n  lookingForAJob: boolean;\n  lookingForAJobDescription: string;\n  fullName: string;\n  contacts: ProfileContactsType;\n  photos: PhotosType;\n};\nexport type ProfileContactsType = {\n  github: string;\n  vk: string;\n  facebook: string;\n  instagram: string;\n  twitter: string;\n  website: string;\n  youtube: string;\n  mainLink: string;\n};\nexport type PhotosType = {\n  small: string;\n  large: string;\n};\n// TYPES\n\nexport const profileAPI = {\n  getProfile(userID: number) {\n    return axiosInstance\n      .get<UserProfileType>(`profile/${userID}`)\n      .then((res) => res.data);\n  },\n  getStatus(userID: number) {\n    return axiosInstance\n      .get<string>(`profile/status/${userID}`)\n      .then((res) => res.data);\n  },\n  updateStatus(status: string) {\n    return axiosInstance\n      .put<ResponseType>(`profile/status`, { status })\n      .then((res) => res.data);\n  },\n  updatePhoto(image: File) {\n    const formData = new FormData();\n    formData.append(\"image\", image); // creating formData object to send file to server\n\n    return axiosInstance\n      .put<ResponseType<{ photos: PhotosType }>>(`profile/photo`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        }, // configuring specific headers for the file sent\n      })\n      .then((res) => res.data);\n  },\n};\n","import { InferActionsType, RootThunkType } from \"../store\";\nimport { PhotosType, profileAPI, UserProfileType } from \"../../api/profile-api\";\nimport { ResultCode } from \"../../api/api\";\n\nexport type PostType = {\n  id: number;\n  postText: string;\n  likesCount: number;\n};\nexport type ProfileInitialStateType = typeof profileInitialState;\ntype ProfileReducerActionsType = InferActionsType<typeof profileActions>;\n// TYPES\n\nconst profileInitialState = {\n  posts: [\n    { id: 1, postText: \"what's up?\", likesCount: 3 },\n    { id: 2, postText: \"hey!\", likesCount: 1 },\n  ] as Array<PostType>,\n  userProfile: {} as UserProfileType,\n  status: \"\",\n};\n\nexport const profileReducer = (\n  profileState = profileInitialState,\n  action: ProfileReducerActionsType\n): ProfileInitialStateType => {\n  switch (action.type) {\n    case \"profile/ADD_POST\": {\n      const updatedState = { ...profileState, posts: [...profileState.posts] };\n      const newPost = {\n        id: updatedState.posts.length + 1,\n        postText: action.payload.newPostText,\n        likesCount: 0,\n      };\n      return { ...updatedState, posts: [newPost, ...updatedState.posts] };\n    }\n\n    case \"profile/DELETE_POST\": {\n      return {\n        ...profileState,\n        posts: profileState.posts.filter(\n          (post) => post.id !== action.payload.postID\n        ),\n      };\n    }\n\n    case \"profile/SET_USER_PROFILE\":\n    case \"profile/SET_PROFILE_STATUS\":\n      return { ...profileState, ...action.payload };\n\n    case \"profile/SET_PROFILE_PHOTO\":\n      return {\n        ...profileState,\n        userProfile: {\n          ...profileState.userProfile,\n          photos: action.payload.photos,\n        },\n      };\n\n    default:\n      return profileState;\n  }\n};\n// REDUCER\n\nexport const profileActions = {\n  addPost: (newPostText: string) =>\n    ({\n      type: \"profile/ADD_POST\",\n      payload: {\n        newPostText,\n      },\n    } as const),\n  deletePost: (postID: number) =>\n    ({\n      type: \"profile/DELETE_POST\",\n      payload: {\n        postID,\n      },\n    } as const),\n  setUserProfile: (userProfile: UserProfileType) =>\n    ({\n      type: \"profile/SET_USER_PROFILE\",\n      payload: {\n        userProfile,\n      },\n    } as const),\n  setProfileStatus: (status: string) =>\n    ({\n      type: \"profile/SET_PROFILE_STATUS\",\n      payload: {\n        status,\n      },\n    } as const),\n  setProfilePhoto: (photos: PhotosType) =>\n    ({\n      type: \"profile/SET_PROFILE_PHOTO\",\n      payload: {\n        photos,\n      },\n    } as const),\n};\n// ACs\n\nexport const getUserProfile = (\n  userID: number\n): RootThunkType<ProfileReducerActionsType> => async (dispatch) => {\n  try {\n    const res = await profileAPI.getProfile(userID);\n    dispatch(profileActions.setUserProfile(res));\n  } catch (e) {\n    console.warn(e);\n  }\n};\nexport const getProfileStatus = (\n  userID: number\n): RootThunkType<ProfileReducerActionsType> => async (dispatch) => {\n  try {\n    const res = await profileAPI.getStatus(userID);\n    dispatch(profileActions.setProfileStatus(res));\n  } catch (e) {\n    console.warn(e);\n  }\n};\nexport const updateProfileStatus = (\n  status: string\n): RootThunkType<ProfileReducerActionsType> => async (dispatch) => {\n  try {\n    const res = await profileAPI.updateStatus(status);\n    if (res.resultCode === ResultCode.Success) {\n      dispatch(profileActions.setProfileStatus(status));\n    } else {\n      const errMessage = res.messages[0];\n      alert(errMessage);\n      console.warn(errMessage);\n    }\n  } catch (e) {\n    console.warn(e);\n  }\n};\nexport const updateProfilePhoto = (\n  photo: File\n): RootThunkType<ProfileReducerActionsType> => async (dispatch) => {\n  try {\n    const res = await profileAPI.updatePhoto(photo);\n    if (res.resultCode === ResultCode.Success) {\n      dispatch(profileActions.setProfilePhoto(res.data.photos));\n    } else {\n      const errMessage = res.messages[0];\n      alert(errMessage);\n      console.warn(errMessage);\n    }\n  } catch (e) {\n    console.warn(e);\n  }\n};\n// TCs\n","import { InferActionsType } from \"../store\";\n\nexport type DialogueItemType = {\n  id: number;\n  personName: string;\n};\nexport type MessageType = {\n  id: number;\n  messageText: string;\n};\ntype DialoguesInitialStateType = typeof dialoguesInitialState;\ntype DialoguesReducerActionsType = InferActionsType<typeof dialoguesActions>;\n// TYPES\n\nconst dialoguesInitialState = {\n  dialogues: [\n    { id: 1, personName: \"Stacy\" },\n    { id: 2, personName: \"Gracy\" },\n    { id: 3, personName: \"Mike\" },\n    { id: 4, personName: \"Sam\" },\n    { id: 5, personName: \"Sanya\" },\n  ] as Array<DialogueItemType>,\n  messages: [\n    { id: 1, messageText: \"Hola!\" },\n    { id: 2, messageText: \"Meow\" },\n    { id: 3, messageText: \"What's up?\" },\n    { id: 4, messageText: \"Where have you been?\" },\n    { id: 5, messageText: \"See you soon!\" },\n  ] as Array<MessageType>,\n};\n\nexport const dialoguesReducer = (\n  dialoguesState = dialoguesInitialState,\n  action: DialoguesReducerActionsType\n): DialoguesInitialStateType => {\n  switch (action.type) {\n    case \"dialogues/SEND_MESSAGE\": {\n      const updatedState = {\n        ...dialoguesState,\n        messages: [...dialoguesState.messages],\n      };\n      updatedState.messages.push({\n        id: updatedState.messages.length + 1,\n        messageText: action.payload.newMessageText,\n      });\n      return updatedState;\n    }\n\n    default:\n      return dialoguesState;\n  }\n};\n// REDUCER\n\nexport const dialoguesActions = {\n  sendMessage: (newMessageText: string) =>\n    ({\n      type: \"dialogues/SEND_MESSAGE\",\n      payload: {\n        newMessageText,\n      },\n    } as const),\n};\n// ACs\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__1E9dh\"};"],"sourceRoot":""}