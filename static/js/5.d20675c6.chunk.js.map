{"version":3,"sources":["components/common/FormControls/formControls.module.css","utils/validators/validators.ts","components/common/FormControls/FormControls.tsx","hoc/withAuthRedirect.tsx","components/Dialogues/Dialogues.module.css","components/Dialogues/DialogueItem/DialogueItem.module.css","components/Dialogues/Message/Message.module.css","components/Dialogues/DialogueItem/DialogueItem.tsx","components/Dialogues/Message/Message.tsx","components/Dialogues/AddMessageForm/AddMessageForm.tsx","components/Dialogues/Dialogues.tsx","redux/dialogues/dialoguesSelectors.ts","components/Dialogues/DialoguesContainer.tsx"],"names":["module","exports","maxLength","requiredField","inputValue","maxLength100","length","FormControl","React","memo","meta","children","hasError","touched","error","className","classes","formControl","Textarea","props","input","restProps","Input","withAuthRedirect","WrappedComponent","connect","state","isAuth","selectIsAuth","to","DialogueItem","personName","id","dialogue","Message","messageText","message","AddMessageForm","handleSubmit","onSubmit","Field","component","name","placeholder","validate","style","cursor","reduxForm","form","Dialogues","dialogues","messages","sendMessage","dialogueElements","map","messageElements","dialoguesPage","dialoguesList","messagesList","formData","newMessageText","selectMessages","selectDialogues","DialoguesContainer","compose","dialoguesActions"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,eAAiB,uC,iCCCvH,oEAAO,IAO0BC,EAPpBC,EAAoC,SAACC,GAChD,OAAIA,EACK,KAEA,qBAaEC,GAVoBH,EAUY,IAV8B,SACzEE,GAEA,OAAIA,EAAWE,QAAUJ,EAChB,KAED,iBAAN,OAAwBA,EAAxB,e,kKCXEK,EAA2CC,IAAMC,MACrD,YAAyB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACDC,EAAoBF,EAAKG,SAAWH,EAAKI,MAE/C,OACE,sBACEC,UAAWC,IAAQC,YAAc,KAAOL,EAAWI,IAAQF,MAAQ,IADrE,UAGE,8BAAMH,IACN,8BAAMC,GAAY,+BAAOF,EAAKI,gBAMzBI,EAAwCV,IAAMC,MAAK,SAACU,GACfA,EAAxCR,SADkE,IACxDS,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KADgD,YACzBS,EADyB,8BAEzE,OACE,cAACZ,EAAD,2BAAiBY,GAAjB,aACE,oDAAcC,GAAWC,UAKlBC,EAAqCd,IAAMC,MAAK,SAACU,GACZA,EAAxCR,SAD+D,IACrDS,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KAD6C,YACtBS,EADsB,8BAEtE,OACE,cAACZ,EAAD,2BAAiBY,GAAjB,aACE,iDAAWC,GAAWC,W,4HCrBrB,SAASE,EAAsBC,GAcpC,OAAOC,aALiB,SAACC,GAAD,MAA8C,CACpEC,OAAQC,YAAaF,MAIhBD,EAbmB,SAACN,GAA8B,IAC/CQ,EAAyBR,EAAzBQ,OAAWN,EADmC,YACrBF,EADqB,YAGtD,OAAKQ,EAEE,cAACH,EAAD,eAAuBH,IAFV,cAAC,IAAD,CAAUQ,GAAI,gB,oBCdtC7B,EAAOC,QAAU,CAAC,cAAgB,iCAAiC,cAAgB,iCAAiC,OAAS,0BAA0B,aAAe,kC,oBCAtKD,EAAOC,QAAU,CAAC,SAAW,iC,oBCA7BD,EAAOC,QAAU,CAAC,QAAU,2B,+GCIf6B,EAAetB,IAAMC,MAChC,YAAgD,IAA7CsB,EAA4C,EAA5CA,WAAYC,EAAgC,EAAhCA,GACb,OACE,qBAAKjB,UAAWC,IAAQiB,SAAxB,SACE,cAAC,IAAD,CAASJ,GAAE,qBAAgBG,GAA3B,SAAkCD,S,kBCL7BG,EAAU1B,IAAMC,MAAK,YAAwC,IAArC0B,EAAoC,EAApCA,YACnC,OAAO,qBAAKpB,UAAWC,IAAQoB,QAAxB,SAAkCD,O,oCCOrCE,EAEF7B,IAAMC,MAAK,YAAuB,IAApB6B,EAAmB,EAAnBA,aAChB,OACE,uBAAMC,SAAUD,EAAhB,UACE,8BACE,cAACE,EAAA,EAAD,CACEC,UAAWvB,IACXwB,KAAM,iBACNC,YAAa,eACbC,SAAU,CAACzC,IAAeE,SAG9B,8BACE,wBAAQwC,MAAO,CAAEC,OAAQ,WAAzB,0BAMOC,cAAkC,CAC/CC,KAAM,0BADOD,CAEZV,GCzBUY,EAAYzC,IAAMC,MAC7B,YAA+D,IAA5DyC,EAA2D,EAA3DA,UAAWC,EAAgD,EAAhDA,SAAUC,EAAsC,EAAtCA,YAChBC,EAAmBH,EAAUI,KAAI,SAACrB,GAAD,OACrC,cAACH,EAAD,CAEEC,WAAYE,EAASF,WACrBC,GAAIC,EAASD,IAFRC,EAASD,OAKZuB,EAAkBJ,EAASG,KAAI,SAAClB,GAAD,OACnC,cAACF,EAAD,CAEEC,YAAaC,EAAQD,YACrBH,GAAII,EAAQJ,IAFPI,EAAQJ,OAUjB,OACE,sBAAKjB,UAAWC,IAAQwC,cAAxB,UACE,qBAAKzC,UAAWC,IAAQyC,cAAxB,SAAwCJ,IACxC,sBAAKtC,UAAWC,IAAQ0C,aAAxB,UACE,8BAAMH,IACN,cAAC,EAAD,CAAgBhB,SATA,SAACoB,GACrBP,EAAYO,EAASC,4B,yBCxBdC,EAAiB,SAACnC,GAAD,OAC5BA,EAAM8B,cAAcL,UACTW,EAAkB,SAC7BpC,GAD6B,OAEDA,EAAM8B,cAAcN,W,QCqB5Ca,EAAqBC,YACzBvC,aANsB,SAACC,GAAD,MAA8C,CACpEyB,SAAUU,EAAenC,GACzBwB,UAAWY,EAAgBpC,MAMzB,CAAE0B,YAAaa,IAAiBb,cAElC7B,IALyByC,CAMzBf,GAEac","file":"static/js/5.d20675c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formControls_formControl__3RMTF\",\"error\":\"formControls_error__2-i41\",\"formLevelError\":\"formControls_formLevelError__1uTkE\"};","type FieldValidatorType = (inputValue: string) => string | null;\n\nexport const requiredField: FieldValidatorType = (inputValue) => {\n  if (inputValue) {\n    return null;\n  } else {\n    return \"Field is required\";\n  }\n};\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (\n  inputValue\n) => {\n  if (inputValue.length <= maxLength) {\n    return null;\n  } else {\n    return `Max length is ${maxLength} symbols`;\n  }\n}; // HOF\n\nexport const maxLength100 = maxLengthCreator(100);\n","import React from \"react\";\nimport { WrappedFieldProps } from \"redux-form\";\nimport classes from \"./formControls.module.css\";\n\nconst FormControl: React.FC<WrappedFieldProps> = React.memo(\n  ({ meta, children }) => {\n    const hasError: boolean = meta.touched && meta.error; // if Field was touched and there is an error ( validate[] )\n\n    return (\n      <div\n        className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}\n      >\n        <div>{children}</div>\n        <div>{hasError && <span>{meta.error}</span>}</div>\n      </div>\n    );\n  }\n);\n\nexport const Textarea: React.FC<WrappedFieldProps> = React.memo((props) => {\n  const { children, input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <textarea {...input} {...restProps} />\n    </FormControl>\n  );\n});\n\nexport const Input: React.FC<WrappedFieldProps> = React.memo((props) => {\n  const { children, input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <input {...input} {...restProps} />\n    </FormControl>\n  );\n});\n","import React, { ComponentType } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { RootStateType } from \"../redux/store\";\nimport { selectIsAuth } from \"../redux/auth/authSelectors\";\n\ntype MapStatePropsType = {\n  isAuth: ReturnType<typeof selectIsAuth>;\n};\n\n// \"ConnectedRedirectComponent\" --> RedirectComponent --> Component\nexport function withAuthRedirect<WCP>(WrappedComponent: ComponentType<WCP>) {\n  const RedirectComponent = (props: MapStatePropsType) => {\n    const { isAuth, ...restProps } = props;\n\n    if (!isAuth) return <Redirect to={\"/login\"} />;\n\n    return <WrappedComponent {...(restProps as WCP)} />;\n  };\n\n  const mapStateToProps = (state: RootStateType): MapStatePropsType => ({\n    isAuth: selectIsAuth(state),\n  });\n\n  // \"ConnectedRedirectComponent\"\n  return connect<MapStatePropsType, unknown, WCP, RootStateType>(\n    mapStateToProps\n  )(RedirectComponent);\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialoguesPage\":\"Dialogues_dialoguesPage__1zq8n\",\"dialoguesList\":\"Dialogues_dialoguesList__3pegN\",\"active\":\"Dialogues_active__2blUd\",\"messagesList\":\"Dialogues_messagesList__3-wtX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogue\":\"DialogueItem_dialogue__2lAro\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__a346v\"};","import React from \"react\";\nimport classes from \"./DialogueItem.module.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { DialogueItemType as DialogueItemPropsType } from \"../../../redux/dialogues/dialoguesReducer\";\n\nexport const DialogueItem = React.memo(\n  ({ personName, id }: DialogueItemPropsType) => {\n    return (\n      <div className={classes.dialogue}>\n        <NavLink to={`/dialogues/${id}`}>{personName}</NavLink>\n      </div>\n    );\n  }\n);\n","import React from \"react\";\nimport classes from \"./Message.module.css\";\nimport { MessageType as MessagePropsType } from \"../../../redux/dialogues/dialoguesReducer\";\n\nexport const Message = React.memo(({ messageText }: MessagePropsType) => {\n  return <div className={classes.message}>{messageText}</div>;\n});\n","import React from \"react\";\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport { Textarea } from \"../../common/FormControls/FormControls\";\nimport {\n  maxLength100,\n  requiredField,\n} from \"../../../utils/validators/validators\";\n\nexport type AddMessageFormDataType = {\n  newMessageText: string;\n};\n\nconst AddMessageForm: React.FC<\n  InjectedFormProps<AddMessageFormDataType>\n> = React.memo(({ handleSubmit }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <Field\n          component={Textarea}\n          name={\"newMessageText\"}\n          placeholder={\"Message text\"}\n          validate={[requiredField, maxLength100]}\n        />\n      </div>\n      <div>\n        <button style={{ cursor: \"pointer\" }}>Send</button>\n      </div>\n    </form>\n  );\n});\n\nexport default reduxForm<AddMessageFormDataType>({\n  form: \"dialogueAddMessageForm\",\n})(AddMessageForm);\n","import React from \"react\";\nimport classes from \"./Dialogues.module.css\";\nimport { DialogueItem } from \"./DialogueItem/DialogueItem\";\nimport { Message } from \"./Message/Message\";\nimport { DialoguesPropsType } from \"./DialoguesContainer\";\nimport AddMessageForm, {\n  AddMessageFormDataType,\n} from \"./AddMessageForm/AddMessageForm\";\n\nexport const Dialogues = React.memo(\n  ({ dialogues, messages, sendMessage }: DialoguesPropsType) => {\n    const dialogueElements = dialogues.map((dialogue) => (\n      <DialogueItem\n        key={dialogue.id}\n        personName={dialogue.personName}\n        id={dialogue.id}\n      />\n    ));\n    const messageElements = messages.map((message) => (\n      <Message\n        key={message.id}\n        messageText={message.messageText}\n        id={message.id}\n      />\n    ));\n\n    const addNewMessage = (formData: AddMessageFormDataType) => {\n      sendMessage(formData.newMessageText);\n    };\n\n    return (\n      <div className={classes.dialoguesPage}>\n        <div className={classes.dialoguesList}>{dialogueElements}</div>\n        <div className={classes.messagesList}>\n          <div>{messageElements}</div>\n          <AddMessageForm onSubmit={addNewMessage} />\n        </div>\n      </div>\n    );\n  }\n);\n","import { RootStateType } from \"../store\";\nimport { DialogueItemType, MessageType } from \"./dialoguesReducer\";\n\nexport const selectMessages = (state: RootStateType): Array<MessageType> =>\n  state.dialoguesPage.messages;\nexport const selectDialogues = (\n  state: RootStateType\n): Array<DialogueItemType> => state.dialoguesPage.dialogues;\n","import React from \"react\";\nimport { Dialogues } from \"./Dialogues\";\nimport { connect } from \"react-redux\";\nimport { RootStateType } from \"../../redux/store\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport {\n  selectDialogues,\n  selectMessages,\n} from \"../../redux/dialogues/dialoguesSelectors\";\nimport { dialoguesActions } from \"../../redux/dialogues/dialoguesReducer\";\n// IMPORTS\n\ntype MapStatePropsType = {\n  messages: ReturnType<typeof selectMessages>;\n  dialogues: ReturnType<typeof selectDialogues>;\n};\ntype MapDispatchPropsType = {\n  sendMessage: (newMessageText: string) => void;\n};\nexport type DialoguesPropsType = MapStatePropsType & MapDispatchPropsType;\n// TYPES\n\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => ({\n  messages: selectMessages(state),\n  dialogues: selectDialogues(state),\n});\n\nconst DialoguesContainer = compose<React.ComponentType>(\n  connect<MapStatePropsType, MapDispatchPropsType, unknown, RootStateType>(\n    mapStateToProps,\n    { sendMessage: dialoguesActions.sendMessage }\n  ),\n  withAuthRedirect\n)(Dialogues);\n\nexport default DialoguesContainer;\n"],"sourceRoot":""}