{"version":3,"sources":["components/common/FormControls/formControls.module.css","utils/validators/validators.ts","components/common/FormControls/FormControls.tsx","hoc/withAuthRedirect.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/AddPostForm/AddPostForm.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","redux/profile/profileSelectors.ts","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","maxLength","requiredField","inputValue","maxLength100","length","FormControl","React","memo","meta","children","hasError","touched","error","className","classes","formControl","Textarea","props","input","restProps","Input","withAuthRedirect","Component","connect","state","isAuth","auth","to","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","unsupportedIterableToArray","TypeError","ProfileStatus","useEffect","setStatus","status","useState","editMode","setEditMode","onChange","event","currentTarget","onBlur","updateUserStatus","autoFocus","onDoubleClick","ProfileInfo","userProfile","userId","descriptionBlock","src","photos","large","alt","Preloader","Post","deletePost","postText","likesCount","id","item","onClick","btn","AddPostForm","handleSubmit","onSubmit","Field","component","placeholder","name","validate","reduxForm","form","MyPosts","posts","addPost","postsElements","map","post","postsBlock","formData","newPostText","selectUserProfile","profilePage","selectStatus","selectPosts","MyPostsContainer","Profile","ProfileClassContainer","render","userID","Number","this","match","params","authUserID","history","getUserProfile","getUserStatus","PureComponent","ProfileContainer","compose","selectAuthUserID","selectIsAuth","withRouter"],"mappings":"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","file":"static/js/4.b55e95c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formControls_formControl__3RMTF\",\"error\":\"formControls_error__2-i41\",\"formLevelError\":\"formControls_formLevelError__1uTkE\"};","type FieldValidatorType = (inputValue: string) => string | null;\n\nexport const requiredField: FieldValidatorType = (inputValue) => {\n  if (inputValue) return null;\n  else return \"Field is required\";\n};\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (\n  inputValue\n) => {\n  if (inputValue.length <= maxLength) return null;\n  else return `Max length is ${maxLength} symbols`;\n}; // HOF\n\nexport const maxLength100 = maxLengthCreator(100);\n","import React, { FC } from \"react\";\nimport { WrappedFieldProps } from \"redux-form\";\nimport classes from \"./formControls.module.css\";\n\nconst FormControl: FC<WrappedFieldProps> = React.memo(({ meta, children }) => {\n  const hasError: boolean = meta.touched && meta.error; // if Field was touched and there is an error ( validate[] )\n\n  return (\n    <div\n      className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}\n    >\n      <div>{children}</div>\n      <div>{hasError && <span>{meta.error}</span>}</div>\n    </div>\n  );\n});\n\nexport const Textarea: FC<WrappedFieldProps> = React.memo((props) => {\n  const { children, input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <textarea {...input} {...restProps} />\n    </FormControl>\n  );\n});\n\nexport const Input: FC<WrappedFieldProps> = React.memo((props) => {\n  const { children, input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <input {...input} {...restProps} />\n    </FormControl>\n  );\n});\n","import React, { ComponentType } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { RootStateType } from \"../redux/redux-store\";\n\ntype MapStatePropsType = {\n  isAuth: boolean;\n};\n\n// \"ConnectedRedirectComponent\" --> RedirectComponent --> Component\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n  const RedirectComponent = (props: MapStatePropsType) => {\n    const { isAuth, ...restProps } = props;\n\n    if (!isAuth) return <Redirect to={\"/login\"} />;\n\n    return <Component {...(restProps as T)} />;\n  };\n\n  const mapStateToProps = (state: RootStateType): MapStatePropsType => ({\n    isAuth: state.auth.isAuth,\n  });\n\n  // \"ConnectedRedirectComponent\"\n  return connect(mapStateToProps)(RedirectComponent);\n}\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__jQkLm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__40GKj\",\"posts\":\"MyPosts_posts__2WI8d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3JLOK\",\"btn\":\"Post_btn__177Pz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"AddPostForm_btn__3Aglt\"};","import React, { ChangeEvent, useEffect, useState } from \"react\";\n\ntype ProfileStatusPropsType = {\n  status: string;\n  updateUserStatus: (status: string) => void;\n};\n\nexport const ProfileStatus = React.memo((props: ProfileStatusPropsType) => {\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]); // async. response (status) received --> props.status changed --> useEffect is called\n  // useEffect() is always executed asynchronously after component returns JSX (after mounting/updating in DOM) !\n\n  const [editMode, setEditMode] = useState(false);\n  const [status, setStatus] = useState(props.status);\n  // useState()'s setSTATE() invokes component re-rendering\n\n  const activateEditMode = () => setEditMode(true);\n  const deactivateEditMode = () => {\n    setEditMode(false);\n    props.updateUserStatus(status);\n  };\n  const onStatusChange = (event: ChangeEvent<HTMLInputElement>) =>\n    setStatus(event.currentTarget.value);\n\n  return (\n    <div>\n      {editMode ? (\n        <div>\n          <input\n            onChange={onStatusChange}\n            onBlur={deactivateEditMode}\n            value={status}\n            autoFocus\n          />\n        </div>\n      ) : (\n        <div>\n          <span onDoubleClick={activateEditMode}>\n            {props.status || \"No status\"}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n});\n","import React from \"react\";\nimport classes from \"./ProfileInfo.module.css\";\nimport { Preloader } from \"../../common/Preloader/Preloader\";\nimport { UserProfileType } from \"../../../api/API\";\nimport { ProfileStatus } from \"./ProfileStatus/ProfileStatus\";\n\ntype ProfileInfoPropsType = {\n  userProfile: UserProfileType;\n  status: string;\n  updateUserStatus: (status: string) => void;\n};\n\nexport const ProfileInfo = React.memo(\n  ({ userProfile, updateUserStatus, status }: ProfileInfoPropsType) => {\n    if (!userProfile.userId) {\n      return <Preloader />;\n    } else\n      return (\n        <div>\n          <div className={classes.descriptionBlock}>\n            <img src={userProfile.photos.large} alt={\"User\"} />\n            <ProfileStatus\n              status={status}\n              updateUserStatus={updateUserStatus}\n            />\n          </div>\n        </div>\n      );\n  }\n);\n","import React from \"react\";\nimport classes from \"./Post.module.css\";\nimport { PostType } from \"../../../../redux/profile/profileReducer\";\n\ntype PostPropsType = PostType & {\n  deletePost: (postID: number) => void;\n};\n\nexport const Post = React.memo(\n  ({ deletePost, postText, likesCount, id }: PostPropsType) => {\n    const onClickHandler = () => deletePost(id);\n\n    return (\n      <div className={classes.item}>\n        <img\n          src={\n            \"https://www.uni-regensburg.de/Fakultaeten/phil_Fak_II/Psychologie/Psy_II/beautycheck/english/prototypen/w_sexy_gr.jpg\"\n          }\n          alt={\"person\"}\n        />\n        {postText}\n        <div>\n          <span>{likesCount}</span>\n        </div>\n        <button onClick={onClickHandler} className={classes.btn}>\n          Delete post\n        </button>\n      </div>\n    );\n  }\n);\n","import {\n  maxLength100,\n  requiredField,\n} from \"../../../../utils/validators/validators\";\nimport React from \"react\";\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport { Textarea } from \"../../../common/FormControls/FormControls\";\nimport classes from \"./AddPostForm.module.css\";\n\nexport type AddPostFormDataType = {\n  newPostText: string;\n};\n\nconst AddPostForm: React.FC<\n  InjectedFormProps<AddPostFormDataType>\n> = React.memo(({ handleSubmit }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <Field\n          component={Textarea}\n          placeholder={\"Post text\"}\n          name={\"newPostText\"}\n          validate={[requiredField, maxLength100]}\n        />\n      </div>\n      <div>\n        <button className={classes.btn}>Add post</button>\n      </div>\n    </form>\n  );\n});\n\nexport default reduxForm<AddPostFormDataType>({\n  form: \"profileAddPostForm\",\n})(AddPostForm);\n","import React from \"react\";\nimport classes from \"./MyPosts.module.css\";\nimport { Post } from \"./Post/Post\";\nimport { MyPostsPropsType } from \"./MyPostsContainer\";\nimport AddPostForm, { AddPostFormDataType } from \"./AddPostForm/AddPostForm\";\n\nexport const MyPosts = React.memo(\n  ({ posts, addPost, deletePost }: MyPostsPropsType) => {\n    const postsElements = posts.map((post) => (\n      <div key={post.id}>\n        <Post\n          postText={post.postText}\n          likesCount={post.likesCount}\n          id={post.id}\n          deletePost={deletePost}\n        />\n      </div>\n    ));\n\n    const onPostAdding = (formData: AddPostFormDataType) => {\n      addPost(formData.newPostText);\n    };\n\n    return (\n      <div className={classes.postsBlock}>\n        <h3>My posts</h3>\n        <AddPostForm onSubmit={onPostAdding} />\n        <div className={classes.posts}>{postsElements}</div>\n      </div>\n    );\n  }\n);\n","import { RootStateType } from \"../redux-store\";\nimport { UserProfileType } from \"../../api/API\";\nimport { PostType } from \"./profileReducer\";\n\nexport const selectUserProfile = (state: RootStateType): UserProfileType =>\n  state.profilePage.userProfile;\nexport const selectStatus = (state: RootStateType): string =>\n  state.profilePage.status;\nexport const selectPosts = (state: RootStateType): Array<PostType> =>\n  state.profilePage.posts;\n","import { addPost, deletePost } from \"../../../redux/profile/profileReducer\";\nimport { MyPosts } from \"./MyPosts\";\nimport { connect } from \"react-redux\";\nimport { RootStateType } from \"../../../redux/redux-store\";\nimport { selectPosts } from \"../../../redux/profile/profileSelectors\";\n// IMPORTS\n\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>;\ntype MapDispatchPropsType = {\n  addPost: (newPostText: string) => void;\n  deletePost: (postID: number) => void;\n};\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType;\n// TYPES\n\nconst mapStateToProps = (state: RootStateType) => ({\n  posts: selectPosts(state),\n});\n\nexport const MyPostsContainer = connect<\n  MapStatePropsType,\n  MapDispatchPropsType,\n  unknown,\n  RootStateType\n>(mapStateToProps, { addPost, deletePost })(MyPosts);\n","import React from \"react\";\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\";\nimport { MyPostsContainer } from \"./MyPosts/MyPostsContainer\";\nimport { UserProfileType } from \"../../api/API\";\n\ntype ProfilePropsType = {\n  userProfile: UserProfileType;\n  status: string;\n  updateUserStatus: (status: string) => void;\n};\n\nexport const Profile = React.memo(\n  ({ userProfile, updateUserStatus, status }: ProfilePropsType) => {\n    return (\n      <div>\n        <ProfileInfo\n          userProfile={userProfile}\n          status={status}\n          updateUserStatus={updateUserStatus}\n        />\n        <MyPostsContainer />\n      </div>\n    );\n  }\n);\n","import React from \"react\";\nimport { Profile } from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport { RootStateType } from \"../../redux/redux-store\";\nimport {\n  getUserProfile,\n  getUserStatus,\n  updateUserStatus,\n} from \"../../redux/profile/profileReducer\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport {\n  selectStatus,\n  selectUserProfile,\n} from \"../../redux/profile/profileSelectors\";\nimport { selectAuthUserID, selectIsAuth } from \"../../redux/auth/authSelectors\";\n// IMPORTS\n\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>;\ntype MapDispatchPropsType = {\n  getUserProfile: (userID: number) => void;\n  getUserStatus: (userID: number) => void;\n  updateUserStatus: (status: string) => void;\n};\ntype ProfilePathParamsType = {\n  userID: string;\n};\ntype ProfileClassContainerPropsType = RouteComponentProps<ProfilePathParamsType> &\n  MapStatePropsType &\n  MapDispatchPropsType;\n// TYPES\n\n// ProfileContainer --> --> ProfileClassContainer --> Profile\nclass ProfileClassContainer extends React.PureComponent<ProfileClassContainerPropsType> {\n  componentDidMount() {\n    let userID = Number(this.props.match.params.userID);\n    if (!userID && this.props.authUserID) {\n      userID = this.props.authUserID;\n    } else if (!userID && !this.props.authUserID) {\n      this.props.history.push(\"/login\"); // program redirect - not via JSX !\n    }\n    this.props.getUserProfile(userID);\n    this.props.getUserStatus(userID);\n  }\n\n  render = () => {\n    return (\n      <Profile\n        userProfile={this.props.userProfile}\n        status={this.props.status}\n        updateUserStatus={this.props.updateUserStatus}\n      />\n    );\n  };\n}\n\nconst mapStateToProps = (state: RootStateType) => ({\n  userProfile: selectUserProfile(state),\n  status: selectStatus(state),\n  authUserID: selectAuthUserID(state),\n  isAuth: selectIsAuth(state),\n});\n\nconst ProfileContainer = compose<React.ComponentType>(\n  connect<MapStatePropsType, MapDispatchPropsType, unknown, RootStateType>(\n    mapStateToProps,\n    {\n      getUserProfile,\n      getUserStatus,\n      updateUserStatus,\n    }\n  ),\n  withRouter,\n  withAuthRedirect\n)(ProfileClassContainer);\n// the same as --> connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus, })(withRouter(withAuthRedirect(ProfileClassContainer)))\n\nexport default ProfileContainer;\n"],"sourceRoot":""}