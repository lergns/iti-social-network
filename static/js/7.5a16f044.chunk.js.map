{"version":3,"sources":["components/common/FormControls/formControls.module.css","utils/validators/validators.ts","components/common/FormControls/FormControls.tsx","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx"],"names":["module","exports","maxLength","requiredField","inputValue","maxLength100","length","FormControl","React","memo","meta","children","hasError","touched","error","className","classes","formControl","Textarea","props","input","restProps","Input","LoginForm","handleSubmit","captchaURL","onSubmit","Field","component","name","placeholder","validate","type","style","cursor","src","alt","formLevelError","reduxForm","form","Login","login","isAuth","to","formData","email","password","rememberMe","captcha","LoginContainer","connect","state","selectIsAuth","selectCaptchaURL"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,eAAiB,uC,iCCCvH,oEAAO,IAO0BC,EAPpBC,EAAoC,SAACC,GAChD,OAAIA,EACK,KAEA,qBAaEC,GAVoBH,EAUY,IAV8B,SACzEE,GAEA,OAAIA,EAAWE,QAAUJ,EAChB,KAED,iBAAN,OAAwBA,EAAxB,e,kKCXEK,EAA2CC,IAAMC,MACrD,YAAyB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACDC,EAAoBF,EAAKG,SAAWH,EAAKI,MAE/C,OACE,sBACEC,UAAWC,IAAQC,YAAc,KAAOL,EAAWI,IAAQF,MAAQ,IADrE,UAGE,8BAAMH,IACN,8BAAMC,GAAY,+BAAOF,EAAKI,gBAMzBI,EAAwCV,IAAMC,MAAK,SAACU,GACfA,EAAxCR,SADkE,IACxDS,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KADgD,YACzBS,EADyB,8BAEzE,OACE,cAACZ,EAAD,2BAAiBY,GAAjB,aACE,oDAAcC,GAAWC,UAKlBC,EAAqCd,IAAMC,MAAK,SAACU,GACZA,EAAxCR,SAD+D,IACrDS,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KAD6C,YACtBS,EADsB,8BAEtE,OACE,cAACZ,EAAD,2BAAiBY,GAAjB,aACE,iDAAWC,GAAWC,W,yHCbtBE,EAEFf,IAAMC,MAAK,YAA0C,IAAvCe,EAAsC,EAAtCA,aAAcV,EAAwB,EAAxBA,MAAOW,EAAiB,EAAjBA,WACrC,OACE,uBAAMC,SAAUF,EAAhB,UACE,8BACE,cAACG,EAAA,EAAD,CACEC,UAAWN,IACXO,KAAM,QACNC,YAAa,QACbC,SAAU,CAAC5B,SAIf,8BACE,cAACwB,EAAA,EAAD,CACEC,UAAWN,IACXO,KAAM,WACNG,KAAM,WACNF,YAAa,WACbC,SAAU,CAAC5B,SAIf,gCACE,cAACwB,EAAA,EAAD,CACEM,MAAO,CAAEC,OAAQ,WACjBN,UAAWN,IACXO,KAAM,aACNG,KAAM,aALV,iBAUCP,GAAc,qBAAKU,IAAKV,EAAYW,IAAK,YACzCX,GACC,8BACE,cAACE,EAAA,EAAD,CACEC,UAAWN,IACXO,KAAM,UACNC,YAAa,UACbC,SAAU,CAAC5B,SAKhBW,GAAS,qBAAKC,UAAWC,IAAQqB,eAAxB,SAAyCvB,IAEnD,8BACE,wBAAQmB,MAAO,CAAEC,OAAQ,WAAzB,4BAOOI,cAAiD,CAC9DC,KAAM,aADOD,CAEZf,G,OCxEUiB,EAAQhC,IAAMC,MACzB,YAAoD,IAAjDgC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,OAAQjB,EAAiC,EAAjCA,WAShB,OAAIiB,EACK,cAAC,IAAD,CAAUC,GAAI,aAGnB,gCACE,wCACA,2DAC4B,uBAD5B,qBAGA,cAAC,EAAD,CAAWjB,SAjBA,SAACkB,GAAD,OACfH,EACEG,EAASC,MACTD,EAASE,SACTF,EAASG,WACTH,EAASI,UAYwBvB,WAAYA,U,wBCC/CwB,EAAiBC,aALC,SAACC,GAAD,MAA8C,CACpET,OAAQU,YAAaD,GACrB1B,WAAY4B,YAAiBF,MAQZ,CAAEV,WALES,CAKOV,GAEfS","file":"static/js/7.5a16f044.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formControls_formControl__3RMTF\",\"error\":\"formControls_error__2-i41\",\"formLevelError\":\"formControls_formLevelError__1uTkE\"};","type FieldValidatorType = (inputValue: string) => string | null;\n\nexport const requiredField: FieldValidatorType = (inputValue) => {\n  if (inputValue) {\n    return null;\n  } else {\n    return \"Field is required\";\n  }\n};\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (\n  inputValue\n) => {\n  if (inputValue.length <= maxLength) {\n    return null;\n  } else {\n    return `Max length is ${maxLength} symbols`;\n  }\n}; // HOF\n\nexport const maxLength100 = maxLengthCreator(100);\n","import React from \"react\";\nimport { WrappedFieldProps } from \"redux-form\";\nimport classes from \"./formControls.module.css\";\n\nconst FormControl: React.FC<WrappedFieldProps> = React.memo(\n  ({ meta, children }) => {\n    const hasError: boolean = meta.touched && meta.error; // if Field was touched and there is an error ( validate[] )\n\n    return (\n      <div\n        className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}\n      >\n        <div>{children}</div>\n        <div>{hasError && <span>{meta.error}</span>}</div>\n      </div>\n    );\n  }\n);\n\nexport const Textarea: React.FC<WrappedFieldProps> = React.memo((props) => {\n  const { children, input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <textarea {...input} {...restProps} />\n    </FormControl>\n  );\n});\n\nexport const Input: React.FC<WrappedFieldProps> = React.memo((props) => {\n  const { children, input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <input {...input} {...restProps} />\n    </FormControl>\n  );\n});\n","import React from \"react\";\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport { Input } from \"../../common/FormControls/FormControls\";\nimport { requiredField } from \"../../../utils/validators/validators\";\nimport classes from \"../../common/FormControls/formControls.module.css\";\nimport { selectCaptchaURL } from \"../../../redux/auth/authSelectors\";\n\nexport type LoginFormDataType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha?: string;\n};\n\ntype LoginFormPropsType = {\n  captchaURL: ReturnType<typeof selectCaptchaURL>;\n};\n\n// passing custom props to LoginForm\nconst LoginForm: React.FC<\n  LoginFormPropsType & InjectedFormProps<LoginFormDataType, LoginFormPropsType>\n> = React.memo(({ handleSubmit, error, captchaURL }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <Field\n          component={Input}\n          name={\"email\"}\n          placeholder={\"Email\"}\n          validate={[requiredField]}\n        />\n      </div>\n\n      <div>\n        <Field\n          component={Input}\n          name={\"password\"}\n          type={\"password\"}\n          placeholder={\"Password\"}\n          validate={[requiredField]}\n        />\n      </div>\n\n      <div>\n        <Field\n          style={{ cursor: \"pointer\" }}\n          component={Input}\n          name={\"rememberMe\"}\n          type={\"checkbox\"}\n        />\n        Remember me\n      </div>\n\n      {captchaURL && <img src={captchaURL} alt={\"Captcha\"} />}\n      {captchaURL && (\n        <div>\n          <Field\n            component={Input}\n            name={\"captcha\"}\n            placeholder={\"Captcha\"}\n            validate={[requiredField]}\n          />\n        </div>\n      )}\n\n      {error && <div className={classes.formLevelError}>{error}</div>}\n\n      <div>\n        <button style={{ cursor: \"pointer\" }}>Log in</button>\n      </div>\n    </form>\n  );\n});\n\n// passing custom props to LoginForm\nexport default reduxForm<LoginFormDataType, LoginFormPropsType>({\n  form: \"loginForm\",\n})(LoginForm);\n","import React from \"react\";\nimport LoginForm, { LoginFormDataType } from \"./LoginForm/LoginForm\";\nimport { LoginPropsType } from \"./LoginContainer\";\nimport { Redirect } from \"react-router-dom\";\n\nexport const Login = React.memo(\n  ({ login, isAuth, captchaURL }: LoginPropsType) => {\n    const onSubmit = (formData: LoginFormDataType) =>\n      login(\n        formData.email,\n        formData.password,\n        formData.rememberMe,\n        formData.captcha\n      );\n\n    if (isAuth) {\n      return <Redirect to={\"/profile\"} />;\n    } else\n      return (\n        <div>\n          <h1>Log in</h1>\n          <p>\n            Email: free@samuraijs.com <br /> Password: free\n          </p>\n          <LoginForm onSubmit={onSubmit} captchaURL={captchaURL} />\n        </div>\n      );\n  }\n);\n","import { RootStateType } from \"../../redux/store\";\nimport { Login } from \"./Login\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../redux/auth/authReducer\";\nimport { selectCaptchaURL, selectIsAuth } from \"../../redux/auth/authSelectors\";\n\ntype MapStatePropsType = {\n  isAuth: ReturnType<typeof selectIsAuth>;\n  captchaURL: ReturnType<typeof selectCaptchaURL>;\n};\ntype MapDispatchPropsType = {\n  login: (\n    email: string,\n    password: string,\n    rememberMe?: boolean,\n    captcha?: string\n  ) => void;\n};\nexport type LoginPropsType = MapStatePropsType & MapDispatchPropsType;\n\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => ({\n  isAuth: selectIsAuth(state),\n  captchaURL: selectCaptchaURL(state),\n});\n\nconst LoginContainer = connect<\n  MapStatePropsType,\n  MapDispatchPropsType,\n  unknown,\n  RootStateType\n>(mapStateToProps, { login })(Login);\n\nexport default LoginContainer;\n"],"sourceRoot":""}